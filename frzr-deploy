#! /bin/bash

set -e
set -x

if [ $EUID -ne 0 ]; then
	echo "$(basename "$0") must be run as root"
	exit 1
fi

MANIFEST=/tmp/frzr_manifest
MOUNT_PATH=/frzr_root

UEFI="-d /sys/firmware/efi/efivars"

if ! mountpoint -q ${MOUNT_PATH}; then
	MOUNT_PATH=/tmp/frzr_root
fi

DEPLOY_PATH=${MOUNT_PATH}/deployments

if ! mountpoint -q ${MOUNT_PATH}; then
	mkdir -p ${MOUNT_PATH}
	mount -L frzr_root ${MOUNT_PATH}
	sleep 5
fi

if [ "$UEFI" ] && ! mountpoint -q ${MOUNT_PATH}/boot; then
	mkdir -p ${MOUNT_PATH}/boot
	mount -L frzr_efi ${MOUNT_PATH}/boot
	sleep 5
fi

mkdir -p ${DEPLOY_PATH}

# delete old deployments unless we are not currently running a frzr deployment (i.e. during install)
if frzr-release > /dev/null; then
	CURRENT=$(frzr-release)
	TO_DELETE=$(ls -1 ${DEPLOY_PATH} | grep -v "${CURRENT}" | head -1)
	if [ -n "${TO_DELETE}" ]; then
		echo "deleting ${TO_DELETE}..."
		btrfs subvolume delete ${DEPLOY_PATH}/"${TO_DELETE}" || true
	fi
fi

if [ -n "$1" ]; then
	echo "$1" > ${MOUNT_PATH}/channel
fi

if [ -e ${MOUNT_PATH}/channel ]; then
	REPO_URL=$(cat ${MOUNT_PATH}/channel | head -1)
else
	echo "ERROR: no channel specified"
	exit
fi

curl -L -s "${REPO_URL}" > ${MANIFEST}
CHANNEL=$(cat ${MANIFEST} | head -1)

VERSION=$(tail -1 ${MANIFEST} | cut -f 1)
IMG_URL=$(tail -1 ${MANIFEST} | cut -f 2)
CHECKSUM=$(tail -1 ${MANIFEST} | cut -f 3)
SUBVOL=${DEPLOY_PATH}/${CHANNEL}-${VERSION}
IMG_FILE=${MOUNT_PATH}/${CHANNEL}-${VERSION}.img.tar.xz

if [ -e "${SUBVOL}" ]; then
	echo "${CHANNEL}-${VERSION} already installed; aborting"
	exit
fi

echo "installing ${CHANNEL}-${VERSION}..."

# delete partially downloaded/installed images/subvolumes
if [ -e "${IMG_FILE}" ]; then
	CHECKSUM2=$(sha256sum "${IMG_FILE}" | cut -d' ' -f 1)
	if [ "$CHECKSUM" != "$CHECKSUM2" ]; then
		rm -f ${MOUNT_PATH}/*.img.tar.xz
	fi
fi

if [ ! -e "${IMG_FILE}" ]; then
	curl -L "${IMG_URL}" > "${IMG_FILE}"
	
	CHECKSUM2=$(sha256sum "${IMG_FILE}" | cut -d' ' -f 1)
	if [ "$CHECKSUM" != "$CHECKSUM2" ]; then
		echo "checksum does not match; aborting"
		exit 1
	fi
fi

tar xfO "${IMG_FILE}" | btrfs receive ${DEPLOY_PATH}
cp "${SUBVOL}"/boot/vmlinuz-linux ${MOUNT_PATH}/boot/
cp "${SUBVOL}"/boot/initramfs-linux.img ${MOUNT_PATH}/boot/

# check if this is a UEFI system
if [ "$UEFI" ]; then
echo "
default ${CHANNEL}-${VERSION}
label ${CHANNEL}-${VERSION}
kernel ../../vmlinuz-linux
append root=LABEL=frzr_root rw rootflags=subvol=deployments/${CHANNEL}-${VERSION} quiet splash loglevel=3 rd.systemd.show_status=auto rd.udev.log_priority=3
initrd ../../initramfs-linux.img
" > ${MOUNT_PATH}/boot/EFI/syslinux/syslinux.cfg
else
echo "
default ${CHANNEL}-${VERSION}
label ${CHANNEL}-${VERSION}
kernel ../vmlinuz-linux
append root=LABEL=frzr_root rw rootflags=subvol=deployments/${CHANNEL}-${VERSION} quiet splash loglevel=3 rd.systemd.show_status=auto rd.udev.log_priority=3
initrd ../initramfs-linux.img
" > ${MOUNT_PATH}/boot/syslinux/syslinux.cfg
fi

rm -f ${MOUNT_PATH}/*.img.tar.xz

umount -R ${MOUNT_PATH}

echo "deployment complete; restart to boot into ${CHANNEL}-${VERSION}"

if command -v frzr-postupdate-script > /dev/null; then
	frzr-postupdate-script
fi
